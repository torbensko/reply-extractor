#!/bin/bash

# This code is provided under a Creative Commons Attribution license (for
# details see: http://creativecommons.org/licenses/by/3.0/). In
# summary, you are free to use the code for any purpose as long as you remember
# to mention my name (Torben Sko) at some point. Also please note that my code
# is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE WARRANTY OF
# DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.



params_file="params.txt"
chrome_output_files=/Users/$(whoami)/Library/Application\ Support/Google/Chrome/Default/FileSystem/http_localhost_0/Persistent
templateHead="head.html"
completeSQLFile="extracted_data.sql"
createDBFile="schema.sql"

if [[ $(echo $PWD | grep /Users/ | wc -w) -gt 0 ]] ; then
	# personal user website
	base_url=http://localhost/~$(whoami)${PWD#/Users/$(whoami)/Sites}
else
	# shared website
	base_url=http://localhost${PWD#/Library/WebServer/Documents}
fi

echo
echo "NOTE: Chrome cannot be running before running this script"
echo
echo "your downloaded pages are going to be accessed from:"
echo $base_url
echo "if this is not correct, please manually set the base_url variable in this script"
echo

if [[ $1 =~ ^-c$ ]] ; then
	echo "cleaning up first"
	for f in ./*/ready--*.html ; do
		rm $f
	done
	for f in ./*/*.sql ; do
		rm $f
	done
	rm $completeSQLFile
fi

function process_dir {
	
	for f in $1/p*.html ; do
		# remove leading "./"
		notRelative=$(echo $f | sed "s/.\///")
		# replace "p" in filename with something that won't match the preceeding for loop wildcard
		preparedHTML=$(echo $notRelative | sed "s/\/p/\/ready--p/")
		# replace "/" with "-"
		outputFile=$(echo ${notRelative%.html}.sql | sed "s/\//-/")
		
		if [ ! -e $1/$outputFile ] ; then
			echo "processing $f"
			
			# place a new header into the file which will cause the comments to be extracted and saved to a file
			php prepare_html.php $f $templateHead $1/$params_file $outputFile > $preparedHTML
		
			/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome -url $base_url/$preparedHTML --args --unlimited-quota-for-files &
					
			# we keep polling the file until it finishes with the correct output
			attempts=10
			while : ; do
				# try to find the output file and see if it has all the content we require
				for out in $(ls "$chrome_output_files") ; do
					lookingFor="$chrome_output_files/$out/$outputFile"
					echo $lookingFor
					if [ -e "$lookingFor" ] ; then
						if [[ $(tail -n 1 "$lookingFor") == "-- finished" ]] ; then
							echo 'found the output'
							mv "$lookingFor" $PWD/$1
							attempts=0
						else
							echo 'found the file - waiting for it to be finished'
						fi
					else
						echo 'waiting for output directory to appear'
					fi
				done
				attempts=$[ $attempts - 1 ]
				if [ $attempts -gt 0 ] ; then
					sleep 5
				fi
				[ $attempts -lt 1 ] && break
			done
			killall -c "Google Chrome"
			sleep 5
		fi
		
	done
}

for f in ./* ; do
	if [[ -d "$f" ]] && [[ -e "$f/$params_file" ]] ; then
		process_dir $f
	fi
done

echo "compiling all the SQL files together"
echo "-- this file is automatically generated - do not edit directly" > $completeSQLFile
cat $createDBFile >> $completeSQLFile

for f in ./*/*.sql ; do
	echo "" >> $completeSQLFile
	cat $f >> $completeSQLFile
done
mysql -u root < $completeSQLFile
mysql -u root comments < views.sql 


echo "complete"
echo





 